-- PROG8620 Midterm Practical Exam (FamilyTree Case Study) 
-- Date: Saturday, Mar 09, 2024
-- Your Name: Avinash Nuthalapati(8943845)
-- Your Section:2

-- CREATE A NEW User and a new DATABASE CONNECTION For FamilyTree;
ALTER SESSION SET "_ORACLE_SCRIPT" = true;
CREATE USER s24midterm identified by s24midterm;
GRANT ALL PRIVILEGES TO s24midterm;

SELECT * FROM all_users ORDER BY Created DESC;

--DROP TABLE tblPerson;

CREATE TABLE tblPerson (
    PersonID       NUMBER(10) GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 CACHE 10),
    SIN            CHAR(9) NOT NULL,
    FatherPersonID NUMBER(10) NULL,
    MotherPersonID NUMBER(10) NULL,    
    FirstName      VARCHAR2(50) NULL,
    LastName       VARCHAR2(60) NULL,
    DateOfBirth    DATE NULL,
    DateOfDeath    DATE NULL,
    NetWorth       NUMBER(10,2),

    CONSTRAINT PK_Person PRIMARY KEY ( PersonID ),
    CONSTRAINT AK_Person_SIN UNIQUE ( SIN )
);

ALTER SESSION SET nls_date_format='yyyy-mm-dd';

INSERT ALL
    -- 1st GENERATION
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  1, '102940116', NULL, NULL, 'Harry',   'Martin',   '1912-02-16', '1963-04-15', NULL) 
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  2, '102940213', NULL, NULL, 'Marie',   'LeFleur',  '1916-04-13', '1963-04-15' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  3, '102940321', NULL, NULL, 'Ron',     'Jones',    '1917-05-21', '2002-11-30' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  4, '102940426', NULL, NULL, 'Sarah',   'Kim',      '1917-03-26', '2006-10-09', NULL )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  5, '102940522', NULL, NULL, 'Fred',    'Cooper',   '1915-11-22', '2000-12-11' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  6, '102940630', NULL, NULL, 'Audrey',  'Maclean',  '1920-06-30', '2007-03-31' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  7, '102940721', NULL, NULL, 'Leo',     'Sanchez',  '1916-08-21', '2004-02-29' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  8, '102940804', NULL, NULL, 'Sarah',   'Black',    '1917-08-04', '2005-08-07' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES (  9, '102940912', NULL, NULL, 'Hui',     'Peng',     '1919-11-12', '1971-06-15' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 10, '102941002', NULL, NULL, 'Rita',    'Yang',     '1921-08-02', '1990-12-03' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 11, '102941109', NULL, NULL, 'Jerry',   'Gold',     '1919-07-09', '1998-05-04' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 12, '102941106', NULL, NULL, 'Kate',    'Lyall',    '1920-04-06', NULL , 2000000)

    -- 2nd GENERATION 
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 13, '311650142',    1,    2, 'Peter',   'Martin',   '1942-01-02', NULL, 1500000 )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 14, '311650241',    3,    4, 'Erin',    'Jones',    '1941-02-14', '1968-07-02', 1200000 )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 15, '311650340',    5,    6, 'Ben',     'Cooper',   '1940-10-31', '2017-09-21' , NULL)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 16, '311650444',    7,    8, 'Tina',    'Sanchez',  '1944-12-25', NULL , 1100000)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 17, '311650541',    9,   10, 'Jeff',    'Peng',     '1941-09-23', '2018-02-12', 1300000 )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 18, '311650643',    11,  12, 'Anne',    'Gold',     '1943-01-17', NULL, 1600000 )

    -- 3rd GENERATION 
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 19, '497580107',   13,   14, 'Ari',     'Martin',   '1968-07-02', NULL, 800000 )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 20, '497580211',   15,   16, 'Judy',    'Cooper',   '1970-11-11', NULL , 800000)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 21, '497580310',   15,   16, 'Daniel',  'Cooper',   '1968-10-04', NULL, 900000 )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 22, '497580403',   17,   18, 'Kate',    'Peng',     '1969-03-07', NULL, 200000 )

    -- 4th GENERATION 
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 23, '501550100',   19,   20, 'Devon',   'Martin',   '1993-07-11', NULL , 40000)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 24, '501550201',   19,   20, 'Jillian', 'Martin',   '1996-05-15', NULL , 70000)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 25, '501550399',   19,   20, 'Brie',    'Martin',   '1998-01-19', NULL , 90000)
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 26, '501550499',   21,   22, 'Stan',    'Cooper',   '1994-05-21', NULL, 90000 )
    INTO tblPerson ( PersonID, SIN, FatherPersonID, MotherPersonID, FirstName, LastName, DateOfBirth, DateOfDeath, NetWorth)
    VALUES ( 27, '501550505',   21,   22, 'Ian',     'Cooper',   '1997-08-25', NULL , 250000)
SELECT 1 FROM DUAL;
SELECT * FROM tblperson;

/***** Requirement 1 Code *******/
-- Requirement 1: Scalar Function to get PersonID by SIN

CREATE OR REPLACE FUNCTION GetPersonIDBySIN(p_SIN IN CHAR)
    RETURN NUMBER
IS
    v_PersonID NUMBER;
BEGIN
    -- Fetch PersonID based on SIN
    SELECT PersonID INTO v_PersonID
    FROM tblPerson
    WHERE SIN = p_SIN;
    
    -- Return the PersonID found
    RETURN v_PersonID;
EXCEPTION
    -- If no rows are returned, handle the exception by returning NULL
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/

-- Requirement 2;
CREATE OR REPLACE PROCEDURE CreateFamilyMember(
  p_SIN           IN CHAR,
  p_FirstName     IN VARCHAR2,
  p_LastName      IN VARCHAR2,
  p_FatherSIN     IN CHAR,
  p_MotherSIN     IN CHAR,
  p_DateOfBirth   IN DATE DEFAULT NULL,
  p_DateOfDeath   IN DATE DEFAULT NULL,
  p_NetWorth      IN NUMBER DEFAULT 10000,
  p_PersonID      OUT NUMBER
) AS
  v_FatherPersonID NUMBER;
  v_MotherPersonID NUMBER;
BEGIN
  -- Start a new transaction
  BEGIN
    -- Find or create FatherPersonID
    IF p_FatherSIN IS NOT NULL THEN
      BEGIN
        -- Try to find existing FatherPersonID
        SELECT PersonID INTO v_FatherPersonID
        FROM tblPerson
        WHERE SIN = p_FatherSIN;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          -- If not found, create a new father record
          INSERT INTO tblPerson (SIN, FirstName, LastName, DateOfBirth, NetWorth)
          VALUES (p_FatherSIN, 'Unknown', 'Unknown', NULL, 10000)
          RETURNING PersonID INTO v_FatherPersonID;
      END;
    END IF;
  
    -- Find or create MotherPersonID
    IF p_MotherSIN IS NOT NULL THEN
      BEGIN
        -- Try to find existing MotherPersonID
        SELECT PersonID INTO v_MotherPersonID
        FROM tblPerson
        WHERE SIN = p_MotherSIN;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          -- If not found, create a new mother record
          INSERT INTO tblPerson (SIN, FirstName, LastName, DateOfBirth, NetWorth)
          VALUES (p_MotherSIN, 'Unknown', 'Unknown', NULL, 10000)
          RETURNING PersonID INTO v_MotherPersonID;
      END;
    END IF;
  
    -- Insert the new person record
    INSERT INTO tblPerson (
      SIN,
      FirstName,
      LastName,
      FatherPersonID,
      MotherPersonID,
      DateOfBirth,
      DateOfDeath,
      NetWorth
    ) VALUES (
      p_SIN,
      p_FirstName,
      p_LastName,
      v_FatherPersonID,
      v_MotherPersonID,
      p_DateOfBirth,
      p_DateOfDeath,
      p_NetWorth
    )
    RETURNING PersonID INTO p_PersonID;
  
    -- Commit the transaction
    COMMIT;

  EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the unique constraint violation if SIN is already present
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20001, 'A person with this SIN already exists.');

    WHEN OTHERS THEN
      -- Roll back the transaction on any other errors
      ROLLBACK;
      RAISE;
  END;
END;
/

SELECT * FROM tblPerson WHERE SIN = '643138677';
-- Check if there are any records with the specified SIN as a parent
SELECT * FROM tblPerson WHERE FatherPersonID = (SELECT PersonID FROM tblPerson WHERE SIN = '643138677');
SELECT * FROM tblPerson WHERE MotherPersonID = (SELECT PersonID FROM tblPerson WHERE SIN = '643138677');
DELETE FROM tblPerson WHERE SIN = '643138677';


-- PROCEDURE 3;

-- Requirement 3: Execute the CreateFamilyMember Procedure and Print PersonID

DECLARE
  v_PersonID NUMBER;  -- Variable to hold the new PersonID
BEGIN
  -- Call the CreateFamilyMember procedure with the specified values
  CreateFamilyMember(
    p_SIN           => '643138677',
    p_FirstName     => 'Gary',
    p_LastName      => 'Martin',
    p_FatherSIN     => '501550100',
    p_MotherSIN     => '503561001',
    p_DateOfBirth   => TO_DATE('2019-12-10', 'YYYY-MM-DD'),
    p_DateOfDeath   => NULL,  -- No value for DateOfDeath
    p_NetWorth      => 10000, -- Default NetWorth value
    p_PersonID      => v_PersonID  -- Output parameter
  );

  -- Print the new PersonID
  DBMS_OUTPUT.PUT_LINE('New PersonID: ' || v_PersonID);
END;
/

--procedure 4;

SELECT
  FirstName,
  LastName,
  RANK() OVER (PARTITION BY LastName ORDER BY DateOfBirth ASC) AS Rank,
  LAG(FirstName, 1, '') OVER (PARTITION BY LastName ORDER BY DateOfBirth ASC) AS YoungerPerson
FROM
  tblPerson
ORDER BY
  LastName,
  DateOfBirth ASC;
  
  CREATE OR REPLACE PROCEDURE GetPersonDetails AS
BEGIN
    -- Execute the query and display the results
    FOR rec IN (
        SELECT 
            FirstName,
            LastName,
            RANK() OVER (PARTITION BY LastName ORDER BY DateOfBirth ASC) AS Rank,
            LEAD(FirstName) OVER (PARTITION BY LastName ORDER BY DateOfBirth ASC) AS YoungerPersonFirstName
        FROM 
            tblPerson
        ORDER BY 
            LastName,
            DateOfBirth
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('FirstName: ' || rec.FirstName || 
                             ', LastName: ' || rec.LastName || 
                             ', Rank: ' || rec.Rank || 
                             ', Younger Person: ' || NVL(rec.YoungerPersonFirstName, 'None'));
    END LOOP;
END;
/
BEGIN
    GetPersonDetails;
END;
/

  
 -- Procedure 5;
 
-- Create DimMember table
create TABLE DimMember ;(
  MemberID INT PRIMARY KEY,
  FirstName VARCHAR2(50),
  LastName VARCHAR2(50),
  DateOfBirth DATE,
  Gender VARCHAR2(10),
  Occupation VARCHAR2(50),
  SCD_Level INT
);

-- Create DimMovie table
CREATE TABLE DimMovie (
  MovieID INT PRIMARY KEY,
  Title VARCHAR2(100),
  Genre VARCHAR2(50),
  ReleaseDate DATE,
  Director VARCHAR2(100),
  Duration INT,
  Price DECIMAL(10, 2)
);

-- Create DimCategory table
CREATE TABLE DimCategory (
  CategoryID INT PRIMARY KEY,
  CategoryName VARCHAR2(50)
);

-- Create FactRental table
CREATE TABLE FactRental (
  RentalID INT PRIMARY KEY,
  MemberID INT,
  MovieID INT,
  CategoryID INT,
  RentalDate DATE,
  ReturnDate DATE,
  GrossProfit DECIMAL(10, 2),
  FOREIGN KEY (MemberID) REFERENCES DimMember(MemberID),
  FOREIGN KEY (MovieID) REFERENCES DimMovie(MovieID),
  FOREIGN KEY (CategoryID) REFERENCES DimCategory(CategoryID)
);

-- Create indexes for optimized queries
CREATE INDEX idx_DimMember_FirstName ON DimMember(FirstName);
CREATE INDEX idx_DimMember_LastName ON DimMember(LastName);
CREATE INDEX idx_DimMovie_Title ON DimMovie(Title);
CREATE INDEX idx_DimMovie_Genre ON DimMovie(Genre);
CREATE INDEX idx_FactRental_MemberID ON FactRental(MemberID);
CREATE INDEX idx_FactRental_MovieID ON FactRental(MovieID);
CREATE INDEX idx_FactRental_CategoryID ON FactRental(CategoryID);

CREATE TABLE DimDate (
  DateValue DATE,
  DayOfWeek VARCHAR2(10),
  DayOfMonth INT,
  Month INT,
  Quarter INT,
  Year INT
);
--procedure 6;
CREATE PROCEDURE LoadDateDimension(
  startDate DATE
)
AS
BEGIN
  FOR i IN 1..1095 LOOP
    INSERT INTO DimDate (
      DateValue,
      DayOfWeek,
      DayOfMonth,
      Month,
      Quarter,
      Year
    ) VALUES (
      startDate + i,
      TO_CHAR(startDate + i, 'DAY'),
      EXTRACT(DAY FROM startDate + i),
      EXTRACT(MONTH FROM startDate + i),
      CEIL(EXTRACT(MONTH FROM startDate + i)/3),
      EXTRACT(YEAR FROM startDate + i)
    );
  END LOOP;
END;
/
EXEC LoadDateDimension(DATE '2020-01-01');
